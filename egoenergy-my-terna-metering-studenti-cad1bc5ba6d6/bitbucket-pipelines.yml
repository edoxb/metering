definitions: # AWS authentication variables are configured in workspace
  steps:
    - step: &push-condition # set AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY as environment variables
        name: Build and push docker image to ECR on edit
        condition:
          changesets:
            includePaths:
              #Insert here file copied on docker image to enable image creation on file edit
              - "Dockerfile"
              - "requirements.txt"
              - "src/**"
              - "bitbucket-pipelines.yml"
        image: amazon/aws-cli
        services:
          - docker
        script:
          # AWS authentication variables
          - source ./bitbucket_pipeline_set_env.sh
          # Docker variables
          - export IMAGE_NAME="${BITBUCKET_REPO_SLUG}"
          - export IMAGE_TAG="${BITBUCKET_BRANCH}-${BITBUCKET_COMMIT}"
          - export IMAGE_TAG_LATEST="${BITBUCKET_BRANCH}-latest"
          # ECR variables
          - export ECR="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
          - export ECR_REPO="${BITBUCKET_PROJECT_KEY,,}/${IMAGE_NAME}"
          - export ECR_IMAGE_NAME="${ECR}/${ECR_REPO}:${IMAGE_TAG}"
          - export ECR_IMAGE_NAME_LATEST="${ECR}/${ECR_REPO}:${IMAGE_TAG_LATEST}"
          # Deploying an image built from pipelines
          - aws ecr get-login-password | docker login --username AWS --password-stdin $ECR
          - docker build -t "${ECR_IMAGE_NAME}" -t "${ECR_IMAGE_NAME_LATEST}"  .
          # Check if repo exists otherwise create it
          - aws ecr describe-repositories --repository-names ${ECR_REPO} || aws ecr create-repository --repository-name ${ECR_REPO} --image-scanning-configuration scanOnPush=true
          # Deploy the image built from pipelines
          - docker push "${ECR_IMAGE_NAME}"
          - docker push "${ECR_IMAGE_NAME_LATEST}"
    - step: &push # set AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY as environment variables
        name: Build and push docker image to ECR
        image: amazon/aws-cli
        services:
          - docker
        script:
          # AWS authentication variables
          - source ./bitbucket_pipeline_set_env.sh
          # Docker variables
          - export IMAGE_NAME="${BITBUCKET_REPO_SLUG}"
          - export IMAGE_TAG="${BITBUCKET_BRANCH}-${BITBUCKET_COMMIT}"
          - export IMAGE_TAG_LATEST="${BITBUCKET_BRANCH}-latest"
          # ECR variables
          - export ECR="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
          - export ECR_REPO="${BITBUCKET_PROJECT_KEY,,}/${IMAGE_NAME}"
          - export ECR_IMAGE_NAME="${ECR}/${ECR_REPO}:${IMAGE_TAG}"
          - export ECR_IMAGE_NAME_LATEST="${ECR}/${ECR_REPO}:${IMAGE_TAG_LATEST}"
          # Deploying an image built from pipelines
          - aws ecr get-login-password | docker login --username AWS --password-stdin $ECR
          - docker build -t "${ECR_IMAGE_NAME}" -t "${ECR_IMAGE_NAME_LATEST}"  .
          # Check if repo exists otherwise create it
          - aws ecr describe-repositories --repository-names ${ECR_REPO} || aws ecr create-repository --repository-name ${ECR_REPO} --image-scanning-configuration scanOnPush=true
          # Deploy the image built from pipelines
          - docker push "${ECR_IMAGE_NAME}"
          - docker push "${ECR_IMAGE_NAME_LATEST}"
    - step: &retag
          name: retag and repush image
          script:
            # get the image that was built in the master branch
            # Docker variables
            - export IMAGE_NAME="${BITBUCKET_REPO_SLUG}"
            - export IMAGE_TAG="master-latest"
            - export NEW_IMAGE_TAG="${BITBUCKET_TAG}"
            # ECR variables
            - export ECR="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
            - export ECR_REPO="${BITBUCKET_PROJECT_KEY}/$IMAGE_NAME" # Think to set it on repo vars
            - export ECR_IMAGE_NAME="${ECR}/${ECR_REPO}:${IMAGE_TAG}"
            - export NEW_ECR_IMAGE_NAME="${ECR}/${ECR_REPO}:${NEW_IMAGE_TAG}"
            # ECR authentication
            - aws ecr get-login-password | docker login --username AWS --password-stdin $ECR
            # pull the image down
            - docker pull $ECR_IMAGE_NAME
            # retag the image using the git tag
            - docker tag $ECR_IMAGE_NAME $NEW_ECR_IMAGE_NAME
            # push the image back
            - docker push $NEW_ECR_IMAGE_NAME
    - step: &task-tagged
        name: Deploy to Fargate
        image: amazon/aws-cli
        caches:
          - node
          - pip
        deployment: production
        script:
          # AWS authentication variables
          - source ./bitbucket_pipeline_set_env.sh
          # Docker variables
          - export IMAGE_NAME="${BITBUCKET_REPO_SLUG}"
          - export IMAGE_TAG="${BITBUCKET_TAG}"
          - export ECR_REPO="${BITBUCKET_PROJECT_KEY,,}/${IMAGE_NAME}"
          - mv ecs/cloudformation.yaml ecs/${BITBUCKET_BRANCH}-${BITBUCKET_REPO_SLUG}.yaml
          - aws cloudformation deploy
            --no-fail-on-empty-changeset 
            --template-file ecs/${BITBUCKET_BRANCH}-${BITBUCKET_REPO_SLUG}.yaml
            --s3-bucket ego-ecs-tasks-services-cloudformation
            --stack-name ${BITBUCKET_BRANCH}-${BITBUCKET_REPO_SLUG} 
            --capabilities CAPABILITY_NAMED_IAM 
            --parameter-overrides 
              EnvironmentName=${BITBUCKET_BRANCH} 
              ServiceName=${BITBUCKET_REPO_SLUG} 
              AccountId=${AWS_ACCOUNT_ID} 
              DefaultRegion=${AWS_DEFAULT_REGION} 
              ImageName=${ECR_REPO} 
              ImageTag=${IMAGE_TAG}
              DestinationBucket=ego-metering-tso-863181445948-eu-west-1
    - step: &task
        name: Deploy to Fargate
        image: amazon/aws-cli
        caches:
          - node
          - pip
        deployment: production
        script:
          # AWS authentication variables
          - source ./bitbucket_pipeline_set_env.sh
          # Docker variables
          - export IMAGE_NAME="${BITBUCKET_REPO_SLUG}"
          - export IMAGE_TAG="${BITBUCKET_BRANCH}-latest"
          - export ECR_REPO="${BITBUCKET_PROJECT_KEY,,}/${IMAGE_NAME}"
          - BITBUCKET_BRANCH=$(sed  's/master/prod/' <<< $BITBUCKET_BRANCH)
          - mv ecs/cloudformation.yaml ecs/${BITBUCKET_BRANCH}-${BITBUCKET_REPO_SLUG}.yaml
          - aws cloudformation deploy
            --no-fail-on-empty-changeset 
            --template-file ecs/${BITBUCKET_BRANCH}-${BITBUCKET_REPO_SLUG}.yaml
            --s3-bucket ego-ecs-tasks-services-cloudformation
            --stack-name ${BITBUCKET_BRANCH}-${BITBUCKET_REPO_SLUG} 
            --capabilities CAPABILITY_NAMED_IAM 
            --parameter-overrides 
              EnvironmentName=${BITBUCKET_BRANCH} 
              ServiceName=${BITBUCKET_REPO_SLUG} 
              AccountId=${AWS_ACCOUNT_ID} 
              DefaultRegion=${AWS_DEFAULT_REGION} 
              ImageName=${ECR_REPO} 
              ImageTag=${IMAGE_TAG}
              DestinationBucket=ego-metering-tso-863181445948-eu-west-1

pipelines:
  custom:
    push-image:
      - step: *push
    deploy-fargate:
      - step: *task
  branches:
    staging:
      - step: *push-condition
      - step: *task
    master:
      - step: *push-condition
      - step: *task
  tags:
    '*':
      - step: *retag
      - step: *task-tagged
      